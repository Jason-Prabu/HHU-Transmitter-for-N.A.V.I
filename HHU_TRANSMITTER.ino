#include <Keypad.h>               // FOR KEYPAD
#include <SPI.h>                  // FOR NRF24LO1
#include <nRF24L01.h>
#include <RF24.h>                 //RF LIBRARY
#include "talkie.h"
//#include <RF24_config.h>          // FOR DEBUG INFO
//#include <printf.h>


// TTS FOR VOICE FEEDBACK ON PIN D3

Talkie voice;

const uint8_t spPAUSE1[]    PROGMEM = {0x08, 0x14, 0xC1, 0xDD, 0x45, 0x64, 0x03, 0x00, 0xFC, 0x4A, 0x56, 0x26, 0x3A, 0x06, 0x0A};
const uint8_t spZERO[]      PROGMEM = {0xA2, 0x2B, 0x20, 0x2D, 0xAA, 0x1A, 0xAA, 0xB6, 0x81, 0xD4, 0x88, 0x72, 0xAC, 0x80, 0x8F, 0xC4, 0x34, 0x90, 0xAA, 0x8F, 0x44, 0xD5, 0x43, 0x4D, 0xCB, 0x16, 0x33, 0x8C, 0xB6, 0x44, 0x23, 0x9A, 0xDC, 0x21, 0xA7, 0x6B, 0xAD, 0x60, 0x28, 0x83, 0x9C, 0x9E, 0x75, 0x82, 0x69, 0x12, 0x74, 0xB2, 0xD1, 0xF1, 0x87, 0x74, 0xAA, 0x89, 0x46, 0x27, 0x18, 0x36, 0x39, 0x5C, 0x17, 0x9D, 0x60, 0xA8, 0x92, 0x34, 0x5B, 0xB4, 0xA2, 0xA6, 0xCA, 0xD2, 0x7D, 0xD1, 0x88, 0x73, 0xB6, 0xF2, 0xA8, 0x96, 0x23, 0xCD, 0x83, 0x4D, 0x23, 0x5D, 0xB7, 0x2C, 0x0F, 0x74, 0xF3, 0xC8, 0xDC, 0x8A, 0x5C, 0xA9, 0xA4, 0x3B, 0x55, 0xAB, 0x73, 0xE5, 0xE2, 0x3A, 0xD7, 0x6D, 0x2C, 0x49, 0x8B, 0x3D, 0x6F, 0x95, 0xB1, 0x78, 0x4D, 0xD7, 0x78, 0x94, 0xA6, 0x64, 0xC3, 0x33, 0xE2, 0x52, 0x9A, 0x92, 0x8D, 0x08, 0xF3, 0x4B, 0x61, 0x4A, 0x31, 0xDC, 0xB8, 0x26, 0xBB, 0x25, 0x05, 0x77, 0x95, 0x7A, 0xF4, 0x06, 0x06};
const uint8_t spONE[]       PROGMEM = {0xA6, 0x90, 0x76, 0xCC, 0x43, 0x6B, 0xB9, 0x42, 0xD8, 0x35, 0x77, 0xA9, 0x19, 0x72, 0xE5, 0x46, 0xD2, 0x62, 0x56, 0xCB, 0xAC, 0x9F, 0x68, 0xE1, 0x4E, 0x23, 0x09, 0x71, 0x23, 0x55, 0x3A, 0x9E, 0xB8, 0xC4, 0x4B, 0x77, 0x6D, 0x74, 0xE3, 0x93, 0x54, 0x7B, 0xE5, 0x6E, 0x2D, 0x4F, 0xD6, 0xEC, 0x56, 0x84, 0xB5, 0x3A, 0x45, 0x0D, 0x5D, 0xA1, 0xD6, 0xA8, 0xF4, 0xC5, 0x58, 0x84, 0x78, 0xEC, 0x34, 0x64, 0x6D, 0x16, 0xEA, 0x8D, 0xC2, 0x90, 0x95, 0x66, 0xB1, 0x25, 0x0E, 0x43, 0x92, 0x1A, 0x43, 0x9E, 0x26, 0x0C, 0x49, 0x49, 0xB4, 0x78, 0xEA, 0x34, 0x16, 0x1B, 0xA6, 0xEA, 0xB1, 0xC9, 0x24, 0x82, 0xBB, 0x88, 0xC8, 0x06, 0x00, 0xF8, 0x26};
const uint8_t spTWO[]       PROGMEM = {0x0E, 0x58, 0x56, 0xCB, 0x00, 0xD7, 0xAB, 0x19, 0xE0, 0x38, 0xCB, 0xE6, 0x0C, 0x65, 0x8A, 0x61, 0xAD, 0x86, 0x9D, 0xA5, 0x79, 0xA4, 0x2D, 0x1E, 0x6E, 0x61, 0x69, 0x9A, 0xF6, 0x79, 0x04, 0x85, 0xA4, 0x6B, 0xC8, 0xEF, 0x16, 0x17, 0x94, 0xA1, 0xC1, 0xBB, 0x5B, 0x5E, 0x61, 0x86, 0x05, 0x7E, 0x0A, 0xA5, 0x0A, 0x25, 0xA6, 0x75, 0x3A, 0x34, 0x8E, 0x5F, 0xA8, 0xEB, 0x4B, 0xD7, 0x49, 0xBB, 0xE6, 0x12, 0x8F, 0xDD, 0xE0, 0xC5, 0x78, 0xB2, 0xBC, 0x36, 0x83, 0x15, 0xEB, 0x2E, 0xF2, 0x48, 0x0D, 0x46, 0x9E, 0x89, 0xE9, 0x2B, 0x31, 0xC8, 0x32, 0x2C, 0x9E, 0xAB, 0xFF, 0x5A, 0x26};
const uint8_t spTHREE[]     PROGMEM = {0x08, 0xA8, 0xC2, 0x8C, 0x02, 0x04, 0x68, 0x2A, 0xDC, 0xF9, 0x51, 0x5B, 0x96, 0x79, 0x8D, 0x10, 0xE5, 0xCA, 0x2E, 0x9A, 0x76, 0x72, 0xD0, 0xC2, 0x5C, 0x25, 0x21, 0x23, 0xCD, 0x0C, 0x4F, 0xD4, 0x22, 0x7A, 0x46, 0x34, 0x3E, 0xF1, 0x48, 0x86, 0xD2, 0xB1, 0xEA, 0x24, 0x33, 0x16, 0x62, 0xE7, 0xAA, 0x55, 0xAC, 0xD4, 0x04, 0xD5, 0x8D, 0x47, 0xB3, 0x53, 0x33, 0xE4, 0x2C, 0x69, 0xED, 0x4E, 0x81, 0x30, 0x53, 0xA7, 0xF5, 0xBB, 0x14, 0x43, 0xF4, 0x92, 0x36, 0xEC, 0x92, 0x04, 0xD5, 0x4B, 0xD2, 0xB8, 0xAB, 0x23, 0xF4, 0x34, 0xCE, 0x63, 0x19, 0x57, 0x73, 0x84, 0xAE, 0x26, 0x69, 0x9C, 0x8D, 0xC0, 0xAB, 0x6B, 0x87, 0xB1, 0x7B, 0x94, 0x99, 0x8A, 0xF2, 0x5A, 0x66};
const uint8_t spFOUR[]      PROGMEM = {0x08, 0xA8, 0xCA, 0x94, 0x00, 0x5D, 0x84, 0x31, 0x20, 0xA9, 0x0A, 0x05, 0x54, 0x1D, 0x16, 0xBC, 0xAA, 0xDC, 0xC3, 0xC4, 0xCE, 0x0A, 0x92, 0xDA, 0x94, 0xA0, 0x4D, 0xC7, 0x4F, 0x7C, 0xDA, 0x0B, 0x73, 0x9F, 0x20, 0xAA, 0x2D, 0x73, 0xCE, 0x75, 0x92, 0x28, 0xB7, 0x23, 0xD9, 0xF7, 0xCA, 0x82, 0xB9, 0x16, 0xD3, 0x5C, 0xA3, 0x88, 0x7A, 0x2A, 0x83, 0x72, 0x8D, 0x2E, 0xEA, 0xED, 0x08, 0xCC, 0xD3, 0x86, 0x68, 0xB6, 0xCD, 0x29, 0x77, 0x19, 0xA3, 0xDE, 0xD6, 0xA0, 0xDE, 0x65, 0x0C, 0x66, 0x5B, 0x82, 0x73, 0x97, 0x31, 0xD8, 0x2D, 0x0B, 0xEA, 0x53, 0xC6, 0x10, 0xB6, 0x24, 0xB8, 0x77, 0x99, 0x42, 0x98, 0x4C, 0xE5, 0xDC, 0x6E, 0x0A, 0xA3, 0x4C, 0xC3, 0x17, 0xFE, 0x5A, 0x16};
const uint8_t spFIVE[]      PROGMEM = {0x08, 0xE8, 0xD2, 0x15, 0x03, 0x02, 0xA8, 0x3A, 0x5D, 0x01, 0x55, 0x96, 0x0E, 0x3F, 0xA5, 0x70, 0xE7, 0x98, 0xBD, 0x82, 0xDC, 0xDB, 0x5D, 0xAD, 0xD6, 0x0A, 0x4A, 0xF8, 0x70, 0xF5, 0x86, 0x27, 0x2E, 0xFE, 0xD3, 0xC5, 0x6B, 0x9D, 0xB4, 0xE9, 0xAB, 0x94, 0x68, 0x78, 0xAA, 0xEA, 0x2F, 0xC3, 0xA3, 0xF1, 0xE9, 0x6A, 0xD8, 0x88, 0xF0, 0xD9, 0xA7, 0x6F, 0x61, 0xA2, 0xDC, 0x66, 0xAF, 0xBE, 0x85, 0xB6, 0x34, 0x9B, 0xB5, 0xFA, 0xEE, 0x5D, 0xD2, 0x73, 0xCE, 0xEA, 0xBB, 0x33, 0x8A, 0xAC, 0x3A, 0x63, 0xE8, 0x56, 0x29, 0xAB, 0xAB, 0x94, 0xBE, 0x67, 0x45, 0xCB, 0x9E, 0x5D, 0xFA, 0xE6, 0x04, 0xB3, 0x72, 0x76, 0xEA, 0x8A, 0x26, 0x6F, 0xCF, 0x29, 0xA9, 0x4D, 0xCA, 0x34, 0x3D, 0x6A, 0xC7, 0xC1, 0x0F, 0xFF, 0x5A, 0x56};
const uint8_t spSIX[]       PROGMEM = {0x04, 0xF8, 0x82, 0x8D, 0x03, 0x0A, 0xF8, 0xCA, 0xDC, 0x01, 0x5F, 0x79, 0x28, 0xE0, 0xEB, 0x30, 0x05, 0x7C, 0xED, 0xBE, 0xBC, 0xAD, 0x8A, 0x34, 0x62, 0xD5, 0x0D, 0x4E, 0xB4, 0xDC, 0x12, 0x87, 0x77, 0x1A, 0xD5, 0x28, 0x09, 0x1E, 0xBE, 0x24, 0x36, 0xA8, 0x15, 0xCA, 0xDD, 0x45, 0x64, 0x03, 0x80, 0x01, 0xF2, 0x54, 0x31, 0xC0, 0x57, 0x15, 0x02, 0xF8, 0xCA, 0x8C, 0x01, 0xDF, 0x58, 0x12, 0xE0, 0x1B, 0x0B, 0x04, 0x7C, 0x2F, 0x86, 0x80, 0xEF, 0xD4, 0xFE, 0x5A, 0x36};
const uint8_t spSEVEN[]     PROGMEM = {0x08, 0xF8, 0x5C, 0x9D, 0x01, 0x5F, 0x78, 0x08, 0xE0, 0x8B, 0x74, 0x05, 0x7C, 0x15, 0xAE, 0x81, 0x61, 0x57, 0x6B, 0x9A, 0xDC, 0x75, 0x8E, 0xD7, 0x6D, 0x48, 0x89, 0x2F, 0x3E, 0x41, 0x0B, 0xED, 0x29, 0x3A, 0xFB, 0x44, 0xD5, 0xA7, 0x87, 0xDA, 0xA2, 0x96, 0xC4, 0x50, 0x11, 0xCA, 0xB5, 0x54, 0xAD, 0x65, 0x6A, 0x88, 0xB8, 0x6A, 0x6D, 0x0E, 0x63, 0xC6, 0xD6, 0xB8, 0x8D, 0xB9, 0x46, 0x38, 0xD9, 0xEC, 0x34, 0xE5, 0xAC, 0x45, 0xBE, 0x75, 0xC2, 0x94, 0x84, 0x78, 0xBB, 0x37, 0xB6, 0x93, 0x9E, 0xC8, 0x24, 0x82, 0xBB, 0x88, 0xC8, 0x06, 0x00, 0x80, 0xFF, 0x5A, 0x76};
const uint8_t spEIGHT[]     PROGMEM = {0x23, 0x1E, 0xC5, 0x58, 0x33, 0xA7, 0x9E, 0xA0, 0x6A, 0xF1, 0xAD, 0x9E, 0xB2, 0xE2, 0xEE, 0x49, 0xAB, 0x3A, 0xCA, 0x2A, 0x66, 0x72, 0x94, 0xE9, 0xDA, 0xBB, 0x0A, 0xC3, 0x30, 0x8C, 0xB5, 0x1D, 0x5B, 0x4C, 0x42, 0xB9, 0xBB, 0x88, 0x6C, 0x00, 0x00, 0x01, 0x5C, 0x91, 0x26, 0x01, 0x04, 0x14, 0x9F, 0xFA, 0x5A, 0x0E};
const uint8_t spNINE[]      PROGMEM = {0xA1, 0x4A, 0x4C, 0xF4, 0x31, 0xDD, 0x85, 0x32, 0x71, 0xB6, 0xC7, 0x74, 0x57, 0xF2, 0x4C, 0x4D, 0x1F, 0x33, 0x79, 0xCB, 0x1A, 0x48, 0x3E, 0xD6, 0xFA, 0x27, 0xE9, 0xB2, 0xD5, 0xC4, 0x1B, 0x9D, 0xB8, 0xD9, 0x4B, 0x17, 0x4F, 0x74, 0xD2, 0xAE, 0x6E, 0x42, 0x3C, 0xD1, 0x29, 0xA7, 0xE9, 0xAA, 0x90, 0x54, 0xA7, 0x9A, 0xBE, 0x3D, 0x52, 0x5A, 0x9D, 0x66, 0xC5, 0x51, 0x49, 0x6B, 0x74, 0xDA, 0x95, 0x46, 0x30, 0xA2, 0xD1, 0xE8, 0x66, 0x2E, 0xE4, 0xCA, 0xCA, 0x6D, 0x58, 0x21, 0x89, 0x3A, 0x23, 0x87, 0x21, 0x73, 0xB5, 0x71, 0x4D, 0x6A, 0x86, 0x20, 0x2C, 0xCE, 0xCD, 0xC9, 0xFF, 0x41};
const uint8_t spA[]         PROGMEM = {0x65, 0x2C, 0x96, 0xAD, 0x7B, 0x6A, 0x9F, 0x66, 0xE4, 0x20, 0x8D, 0x9C, 0x73, 0xAB, 0x5B, 0xDC, 0xE2, 0x96, 0xB7, 0xBA, 0xF5, 0x6A, 0x66, 0x28, 0xA0, 0xCE, 0xD5, 0xBB, 0xDB, 0xFD, 0x1E, 0xE6, 0x38, 0xA7, 0x36, 0xCF, 0x9C, 0x80, 0x51, 0x8B, 0xEB, 0x52, 0xD7, 0xBC, 0xFF, 0x3F};
const uint8_t spB[]         PROGMEM = {0xA6, 0x2F, 0xAA, 0x05, 0x5C, 0xD6, 0x8C, 0xBC, 0xC7, 0x16, 0x70, 0x59, 0x33, 0xB2, 0x95, 0x0B, 0xC1, 0xFD, 0xCD, 0xCC, 0x66, 0x3A, 0xF3, 0x51, 0xAD, 0x98, 0x00, 0x55, 0x8B, 0x67, 0xDB, 0xC7, 0x3E, 0xD5, 0xAD, 0xEE, 0x75, 0x2F, 0xE7, 0x2C, 0x4D, 0x60, 0xBE, 0x26, 0xDF, 0xF1, 0x89, 0xEF, 0xFF, 0x03};
const uint8_t spC[]         PROGMEM = {0x04, 0xF8, 0xA5, 0x83, 0x03, 0x12, 0xB0, 0x80, 0x07, 0x22, 0xB0, 0xC2, 0xEE, 0x8D, 0x45, 0x7D, 0xC9, 0xCA, 0x67, 0x29, 0x42, 0xF5, 0x35, 0x3B, 0xDF, 0xF9, 0x28, 0x66, 0x0D, 0x40, 0xCF, 0xD7, 0xB3, 0x1C, 0xCD, 0xAC, 0x06, 0x14, 0xB5, 0x68, 0x0E, 0x7D, 0xEE, 0x4B, 0xDF, 0xD2, 0x39, 0x5B, 0x02, 0x44, 0xBD, 0xCE, 0x57, 0xBE, 0xF2, 0x9D, 0xEE, 0x55, 0x0A, 0xC1, 0x73, 0x4D, 0x7E, 0xF2, 0xF3, 0xFF};
const uint8_t spD[]         PROGMEM = {0x06, 0x98, 0x30, 0x68, 0xE4, 0x6B, 0x84, 0xA0, 0xE8, 0xD3, 0x93, 0x8D, 0xEC, 0x84, 0x9E, 0x4B, 0x6E, 0x36, 0x8A, 0x19, 0x0D, 0xA8, 0xEA, 0x71, 0xAF, 0x7A, 0xDF, 0xE7, 0xB2, 0xAD, 0xE0, 0x00, 0xD3, 0x8B, 0xEB, 0x9E, 0x8F, 0x7C, 0xA6, 0x73, 0xE5, 0x40, 0xA8, 0x5A, 0x1C, 0xAF, 0x78, 0xC5, 0xDB, 0xDF, 0xFF, 0x0F};
const uint8_t spCOMPLETE[]  PROGMEM = {0x06,0x28,0x29,0x68,0x44,0x29,0xAA,0xA6,0xD6,0xEC,0x15,0xE7,0x9C,0xE6,0x64,0xAB,0x5A,0x9E,0xBD,0x96,0x41,0xB6,0x0D,0x79,0xB2,0xDC,0x48,0xDD,0xCD,0x94,0x49,0x53,0x15,0x7B,0x12,0x54,0x09,0xE5,0xEE,0x22,0xB2,0x01,0x14,0x50,0x7C,0x78,0x00,0x9A,0x61,0x4B,0xC1,0xE2,0x93,0xE8,0x21,0xA7,0x07,0xCB,0x1C,0xDC,0xC1,0xAB,0xEA,0x2C,0x77,0x06,0x03,0xDB,0x5E,0x3C,0xA2,0xA5,0x05,0xFC,0xBA,0x76,0x8B,0x57,0x31,0xE0,0xEE,0xDA,0x24,0x16,0xCA,0xDD,0x45,0x64,0x03,0x00,0x28,0xE0,0x8A,0x34,0x0D,0x20,0xA0,0xFA,0x86,0xFF,0x25,0x51,0x15,0x55,0x05,0x59,0x79,0x61};
const uint8_t spENTER[]     PROGMEM = {0x23,0x98,0x29,0x45,0xD2,0x9A,0x9C,0x60,0xF9,0x16,0x49,0x6D,0x7C,0x83,0x13,0x6C,0x9D,0xAC,0x65,0x8D,0x57,0xD8,0xA4,0x72,0x79,0xD4,0x6E,0x51,0x91,0x22,0xA7,0x9E,0xA4,0xC4,0x99,0xAB,0x3E,0x55,0x3C,0x97,0x44,0xC1,0xF1,0x12,0x76,0x50,0x23,0x94,0xBB,0x8B,0xC8,0x06,0x03,0x7C,0x11,0xA1,0x80,0x4D,0x23,0x5A,0x96,0x9D,0x79,0x7A,0x57,0x19,0x7D,0xF5,0xEE,0x6E,0xBE,0x78,0x8C,0xD5,0xA5,0x85,0xD9,0xEA,0x36,0x95,0x98,0xE6,0x1A,0xB3,0xCA,0x5C,0x62,0x98,0x5B,0xCE,0xCC,0xF3,0xFF,0x25,0x79,0x25,0x25,0x51};
const uint8_t spRESET[]     PROGMEM = {0xAA,0xF0,0x4D,0x54,0x22,0x5B,0xFB,0xAC,0xC5,0x49,0x53,0x66,0x5A,0xCB,0x15,0x76,0xCB,0xA8,0x1B,0xAD,0x56,0x70,0x8C,0x21,0xCF,0x34,0xDA,0xC1,0x76,0x9B,0xBB,0xAC,0x83,0xCC,0x34,0x72,0x7E,0x93,0x42,0x39,0x3D,0x4B,0x01,0x17,0xBB,0x69,0x40,0x00,0x8F,0x85,0x09,0xE0,0xCA,0x0C,0x01,0x5C,0x16,0x29,0x80,0x2B,0x23,0x0C,0xB0,0x69,0x7A,0x2B,0xAA,0x16,0x1B,0xA9,0xD8,0xAB,0x6F,0x56,0x75,0xDC,0x67,0xAF,0xA1,0x7B,0x93,0x4A,0x5B,0x3C,0xC6,0x91,0x42,0xD3,0x74,0x71,0x9A,0xAA,0x93,0x68,0xEB,0x29,0x6C,0x11,0xCA,0xDD,0x45,0x64,0x03,0x28,0x60,0x28,0x77,0x01,0x3C,0x23,0x29,0x80,0x6B,0xD4,0x09,0xB0,0x98,0x27,0x02,0x0A,0x2D,0xFB,0x39,0x25,0x55,0x15,0x51,0x25};


RF24 radio(7, 8);                                         // CE AND CSN PINS CONNECTED TO D7 AND D8
const uint64_t pipes[1] = {0xF0F0F0F0E1LL};               // TRANSMITTER ADDRESS

//const int buzzer = 9;               // +VE TERMINAL OF BUZZER CONNECTED TO D9 THROUGHN RESISTOR

unsigned long bus_number[3];
char bus_arr[6];
int k = 0;
int send_flag = 0;

//KEYPAD ROWS FIRST THEN COLUMN - LEFT TO RIGHT

const byte ROWS = 4;          // 4 ROWS
const byte COLS = 4;          // 4 COLUMNS
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};                                //KEY MAP

byte rowPins[ROWS] = {2, 4, 5, 6}; //connect to the row pinouts of the kpd
byte colPins[COLS] = {A0, A1, A2, A3}; //connect to the column pinouts of the kpd
//From left -right on keypad.......2,4,5,6,A0,A1,A2,A3

Keypad kpd = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

unsigned long send_bus_no;

void setup() {

  Serial.begin(9600);
  Serial.println("NAVI TEST");


  Serial.println("Setting up Radio........");

  radio.begin();                          // START RADIO
  radio.setPALevel(RF24_PA_LOW);          // SET TO LOW POWER CONSUMPTION
  radio.setRetries(15, 15);               // RETRY EVERY 350 milliseconds FOR 15 TIMES
  radio.openWritingPipe(pipes[0]);        // CREATE PIPE TO RECEIVER ADDRESS
  radio.stopListening();                  // ENTER WRITING MODE
  Serial.println("RADIO SETUP DONE");


}


void loop() {

  if (kpd.getKeys())   // IF KEY AVAILABLE
  {

    //  Serial.print("entered");
    for (int i = 0; i < LIST_MAX; i++) // SCAN WHOLE KEY LIST
    {
      if ( kpd.key[i].stateChanged )   // ONLY FIND CHANGED STATE KEYS
      {
        switch (kpd.key[i].kstate)
        { // Report active key state : IDLE, PRESSED, HOLD, or RELEASED

          case PRESSED:
            //   Serial.println(kpd.key[i].kchar);
            // SOUND SPEAKER 
            if (kpd.key[i].kchar == '0')
              voice.say(spZERO);
            else if (kpd.key[i].kchar == '1')
              voice.say(spONE);
            else if (kpd.key[i].kchar == '2')
              voice.say(spTWO);
            else if (kpd.key[i].kchar == '3')
              voice.say(spTHREE);
            else if (kpd.key[i].kchar == '4')
              voice.say(spFOUR);
            else if (kpd.key[i].kchar == '5')
              voice.say(spFIVE);
            else if (kpd.key[i].kchar == '6')
              voice.say(spSIX);
            else if (kpd.key[i].kchar == '7')
              voice.say(spSEVEN);
            else if (kpd.key[i].kchar == '8')
              voice.say(spEIGHT);
            else if (kpd.key[i].kchar == '9')
              voice.say(spNINE);
            else if (kpd.key[i].kchar == '0')
              voice.say(spZERO);
            else if (kpd.key[i].kchar == 'A')
              voice.say(spA);
            else if (kpd.key[i].kchar == 'B')
              voice.say(spB);
            else if (kpd.key[i].kchar == 'C')
              voice.say(spC);
            else if (kpd.key[i].kchar == 'D')
              voice.say(spD);
            else if (kpd.key[i].kchar == '*')
              voice.say(spRESET);
            else if (kpd.key[i].kchar == '#')
              voice.say(spCOMPLETE);
            break;

          case RELEASED:
            if (kpd.key[i].kchar == '*')       // CLEAR ARRAY
            {
              for (int i = 0; i < 6; i++)
                bus_arr[i] = '\0';
              k = 0;
              send_flag = 0;
            }
            else if (kpd.key[i].kchar == '#')  // SEND ARRAY
            {
              if (send_flag == 1)
              {
                bus_arr[k] = '\0';
                send_flag = 0;
                k = 0;
                Serial.println(bus_arr);
                radio.write(&bus_arr, sizeof(bus_arr));     //SEND USING NRF TO RECEIVER
                radio.printDetails();                       // RADIO DEBUG DETAILS
                delay(500);                                 // WAIT 0.5 SECONDS
                Serial.println("WRITTEN");
              }
            }
            else              //  ADD TO ARRAY
            {
              if (k < 5)
              {
                bus_arr[k++] = kpd.key[i].kchar;
                send_flag = 1;
              }
            }
            break;
        }
      }
    }
  }
}



